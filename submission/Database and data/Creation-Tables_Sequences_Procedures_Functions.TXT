CREATE TABLE ATM_INSURANCE_PROVIDER_TB(
INSURANCE_PROVIDER_ID NUMBER(10),
INSURANCE_PROVIDER_NAME VARCHAR2(200) NOT NULL,
CONSTRAINT PK_INSURANCE_PROVIDER PRIMARY KEY(INSURANCE_PROVIDER_ID)
);

CREATE TABLE ATM_USER_PROFILE_TB(
USER_ID NUMBER(10),
FIRST_NAME VARCHAR2(200),
LAST_NAME VARCHAR2(200),
DOB DATE,
GENDER VARCHAR2(1) CHECK(GENDER IN ('M', 'F')),
HEIGHT NUMBER(3),
WEIGHT NUMBER(5),
EMAIL_ID VARCHAR2(50) UNIQUE NOT NULL,
PHONE_NUMBER NUMBER(10) UNIQUE,
INSURANCE_PROVIDER_ID NUMBER(10),
PASSWORD VARCHAR2(32) NOT NULL,
LOGIN_STATUS NUMBER(1) CHECK(LOGIN_STATUS IN (0,1)),
CONSTRAINT PK_USER_PROFILE PRIMARY KEY(USER_ID),
CONSTRAINT FK_USER_INSURANCE_PROVIDER FOREIGN KEY(INSURANCE_PROVIDER_ID) REFERENCES ATM_INSURANCE_PROVIDER_TB(INSURANCE_PROVIDER_ID)
);

CREATE TABLE ATM_HEALTHCARE_CENTER_TB(
HEALTHCARE_CENTER_ID NUMBER(10),
HEALTHCARE_CENTER_NAME VARCHAR2(200) NOT NULL,
ADDRESS VARCHAR2(250) NOT NULL,
PHONE_NUMBER NUMBER(10) NOT NULL,
EMAIL_ID VARCHAR2(50),
LATITUDE NUMBER(20,10) NOT NULL,
LONGITUDE NUMBER(20,10) NOT NULL,
CONSTRAINT PK_HEALTHCARE_PROVIDER PRIMARY KEY(HEALTHCARE_CENTER_ID)
);

CREATE TABLE ATM_OTC_TB(
OTC_ID NUMBER(10),
OTC VARCHAR2(255) UNIQUE NOT NULL,
CONSTRAINT PK_OTC PRIMARY KEY(OTC_ID)
);

CREATE TABLE ATM_HOME_REMEDY_TB(
HOME_REMEDY_ID NUMBER(10),
HOME_REMEDY VARCHAR2(255) UNIQUE NOT NULL,
CONSTRAINT PK_HOME_REMEDY_ID PRIMARY KEY(HOME_REMEDY_ID)
);

CREATE TABLE ATM_BODY_TB(
BODY_PART_ID NUMBER(10),
BODY_PART VARCHAR2(200) UNIQUE NOT NULL,
CONSTRAINT PK_BODY PRIMARY KEY(BODY_PART_ID)
);

CREATE TABLE ATM_SYMPTOM_TB(
SYMPTOM_ID NUMBER(10),
SYMPTOM VARCHAR2(255) UNIQUE NOT NULL,
CONSTRAINT PK_SYMPTOM PRIMARY KEY(SYMPTOM_ID)
);

CREATE TABLE ATM_REMEDY_TB(
REMEDY_ID NUMBER(10),
BODY_PART_ID NUMBER(10),
SYMPTOM_ID NUMBER(10),
HOME_REMEDY_ID1 NUMBER(10),
HOME_REMEDY_ID2 NUMBER(10),
HOME_REMEDY_ID3 NUMBER(10),
OTC_ID1 NUMBER(10),
OTC_ID2 NUMBER(10),
OTC_ID3 NUMBER(10),
CONSTRAINT PK_REMEDY PRIMARY KEY(REMEDY_ID),
CONSTRAINT FK_REMEDY_BODY FOREIGN KEY(BODY_PART_ID) REFERENCES ATM_BODY_TB(BODY_PART_ID),
CONSTRAINT FK_REMEDY_SYMPTOM FOREIGN KEY(SYMPTOM_ID) REFERENCES ATM_SYMPTOM_TB(SYMPTOM_ID),
CONSTRAINT FK_REMEDY_HOME_REMEDY1 FOREIGN KEY(HOME_REMEDY_ID1) REFERENCES ATM_HOME_REMEDY_TB(HOME_REMEDY_ID),
CONSTRAINT FK_REMEDY_HOME_REMEDY2 FOREIGN KEY(HOME_REMEDY_ID2) REFERENCES ATM_HOME_REMEDY_TB(HOME_REMEDY_ID),
CONSTRAINT FK_REMEDY_HOME_REMEDY3 FOREIGN KEY(HOME_REMEDY_ID3) REFERENCES ATM_HOME_REMEDY_TB(HOME_REMEDY_ID),
CONSTRAINT FK_OTC1 FOREIGN KEY(OTC_ID1) REFERENCES ATM_OTC_TB(OTC_ID),
CONSTRAINT FK_OTC2 FOREIGN KEY(OTC_ID2) REFERENCES ATM_OTC_TB(OTC_ID),
CONSTRAINT FK_OTC3 FOREIGN KEY(OTC_ID3) REFERENCES ATM_OTC_TB(OTC_ID)
);

CREATE TABLE ATM_HISTORY_TB(
SEARCH_DATE DATE NOT NULL,
USER_ID NUMBER(10),
REMEDY_ID NUMBER(10),
CONSTRAINT FK_HISTORY_USER_PROFILE FOREIGN KEY(USER_ID) REFERENCES ATM_USER_PROFILE_TB(USER_ID),
CONSTRAINT FK_HISTORY_REMEDY FOREIGN KEY(REMEDY_ID) REFERENCES ATM_REMEDY_TB(REMEDY_ID)
);

CREATE TABLE ATM_INS_PRO_HEALTH_CEN_JOIN_TB(
INSURANCE_PROVIDER_ID NUMBER(10),
HEALTHCARE_CENTER_ID NUMBER(10),
CONSTRAINT FK_JOIN_INSURANCE_PROVIDER FOREIGN KEY(INSURANCE_PROVIDER_ID) REFERENCES ATM_INSURANCE_PROVIDER_TB(INSURANCE_PROVIDER_ID),
CONSTRAINT FK_JOIN_HEALTHCARE_CENTER FOREIGN KEY(HEALTHCARE_CENTER_ID) REFERENCES ATM_HEALTHCARE_CENTER_TB(HEALTHCARE_CENTER_ID)
);

CREATE TABLE INSURANCE_HEALTHCARE_INSERT( 
INSURANCE_PROVIDER_NAME VARCHAR2(200),
HEALTHCARE_CENTER_NAME VARCHAR2(200),
ADDRESS VARCHAR2(250),
PHONE_NUMBER NUMBER(10),
EMAIL_ID VARCHAR2(50),
LATITUDE NUMBER(20,10),
LONGITUDE NUMBER(20,10)
);

CREATE TABLE REMEDY_INSERT(
BODY_PART VARCHAR2(200),
SYMPTOM VARCHAR2(255),
HOME_REMEDY1 VARCHAR2(255),
HOME_REMEDY2 VARCHAR2(255),
HOME_REMEDY3 VARCHAR2(255),
OTC1 VARCHAR2(255),
OTC2 VARCHAR2(255),
OTC3 VARCHAR2(255)
);

CREATE SEQUENCE SEQ_USER_ID
  START WITH 1
  INCREMENT BY 1
  NOCACHE;
  
 CREATE SEQUENCE SEQ_HEALTHCARE_PROVIDER_ID
  START WITH 1
  INCREMENT BY 1
  NOCACHE;
  
CREATE SEQUENCE SEQ_BODY_ID
  START WITH 1
  INCREMENT BY 1
  NOCACHE;

CREATE SEQUENCE SEQ_INSURANCE_PROVIDER_ID
  START WITH 1
  INCREMENT BY 1
  NOCACHE;
  
CREATE SEQUENCE SEQ_REMEDY_ID
  START WITH 1
  INCREMENT BY 1
  NOCACHE;
  
CREATE SEQUENCE SEQ_SYMPTOM_ID
  START WITH 1
  INCREMENT BY 1
  NOCACHE;

CREATE SEQUENCE SEQ_HOME_REMEDY_ID
  START WITH 1
  INCREMENT BY 1
  NOCACHE;

CREATE SEQUENCE SEQ_OTC_ID
  START WITH 1
  INCREMENT BY 1
  NOCACHE;
  
set define off;
  CREATE OR REPLACE PROCEDURE "PROC_INS_HEALTH_INSERT" 
AS
  CURSOR c1
  IS
    SELECT * FROM insurance_healthcare_insert;
  INS_PROV_ID NUMBER;
  HEALTH_CEN_ID NUMBER;
BEGIN
  FOR mrec IN c1
  LOOP
    
    begin
      SELECT INSURANCE_PROVIDER_ID
      INTO INS_PROV_ID
      FROM ATM_INSURANCE_PROVIDER_TB
      WHERE INSURANCE_PROVIDER_NAME=mrec.INSURANCE_PROVIDER_NAME;
    exception
      when NO_DATA_FOUND then
        INS_PROV_ID := SEQ_INSURANCE_PROVIDER_ID.nextval;
        INSERT
        INTO ATM_INSURANCE_PROVIDER_TB VALUES
          (
            INS_PROV_ID,
            mrec.INSURANCE_PROVIDER_NAME
          );
    end;
    
    HEALTH_CEN_ID := SEQ_HEALTHCARE_PROVIDER_ID.nextval;
    INSERT
    INTO ATM_HEALTHCARE_CENTER_TB VALUES
      (
        HEALTH_CEN_ID,
        mrec.HEALTHCARE_CENTER_NAME,
        mrec.ADDRESS,
        mrec.PHONE_NUMBER,
        mrec.EMAIL_ID,
        mrec.LATITUDE,
        mrec.LONGITUDE
      );
      
    insert into ATM_INS_PRO_HEALTH_CEN_JOIN_TB values(INS_PROV_ID,HEALTH_CEN_ID);
  END LOOP;
END;
/

set define off;
  CREATE OR REPLACE PROCEDURE "PROC_REMEDY_INSERT" 
AS
  CURSOR c1
  IS
    SELECT TRIM(BODY_PART) AS BODY_PART,
      TRIM(SYMPTOM)        AS SYMPTOM,
      TRIM(HOME_REMEDY1)   AS HOME_REMEDY1,
      TRIM(HOME_REMEDY2)   AS HOME_REMEDY2,
      TRIM(HOME_REMEDY3)   AS HOME_REMEDY3,
      TRIM(OTC1)           AS OTC1,
      TRIM(OTC2)           AS OTC2,
      TRIM(OTC3)           AS OTC3
    FROM REMEDY_INSERT;
  p_BODY_PART_ID    NUMBER;
  p_SYMPTOM_ID      NUMBER;
  p_HOME_REMEDY_ID1 NUMBER;
  p_HOME_REMEDY_ID2 NUMBER;
  p_HOME_REMEDY_ID3 NUMBER;
  p_OTC_ID1         NUMBER;
  p_OTC_ID2         NUMBER;
  p_OTC_ID3         NUMBER;
  p_REMEDY_ID       NUMBER;
BEGIN
  FOR mrec IN c1
  LOOP
    BEGIN
      SELECT BODY_PART_ID
      INTO p_BODY_PART_ID
      FROM ATM_BODY_TB
      WHERE BODY_PART=mrec.BODY_PART;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      p_BODY_PART_ID := SEQ_BODY_ID.nextval;
      INSERT INTO ATM_BODY_TB VALUES
        ( p_BODY_PART_ID, mrec.BODY_PART
        );
    END;
    BEGIN
      SELECT SYMPTOM_ID
      INTO p_SYMPTOM_ID
      FROM ATM_SYMPTOM_TB
      WHERE SYMPTOM=mrec.SYMPTOM;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      p_SYMPTOM_ID := SEQ_SYMPTOM_ID.nextval;
      INSERT INTO ATM_SYMPTOM_TB VALUES
        ( p_SYMPTOM_ID, mrec.SYMPTOM
        );
    END;
    BEGIN
      SELECT HOME_REMEDY_ID
      INTO p_HOME_REMEDY_ID1
      FROM ATM_HOME_REMEDY_TB
      WHERE HOME_REMEDY=mrec.HOME_REMEDY1;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      IF mrec.HOME_REMEDY1 IS NOT NULL THEN
        p_HOME_REMEDY_ID1  := SEQ_HOME_REMEDY_ID.nextval;
        INSERT
        INTO ATM_HOME_REMEDY_TB VALUES
          (
            p_HOME_REMEDY_ID1,
            mrec.HOME_REMEDY1
          );
      END IF;
    END;
    BEGIN
      SELECT HOME_REMEDY_ID
      INTO p_HOME_REMEDY_ID2
      FROM ATM_HOME_REMEDY_TB
      WHERE HOME_REMEDY=mrec.HOME_REMEDY2;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      IF mrec.HOME_REMEDY2 IS NOT NULL THEN
        p_HOME_REMEDY_ID2  := SEQ_HOME_REMEDY_ID.nextval;
        INSERT
        INTO ATM_HOME_REMEDY_TB VALUES
          (
            p_HOME_REMEDY_ID2,
            mrec.HOME_REMEDY2
          );
      END IF;
    END;
    BEGIN
      SELECT HOME_REMEDY_ID
      INTO p_HOME_REMEDY_ID3
      FROM ATM_HOME_REMEDY_TB
      WHERE HOME_REMEDY=mrec.HOME_REMEDY3;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      IF mrec.HOME_REMEDY3 IS NOT NULL THEN
        p_HOME_REMEDY_ID3  := SEQ_HOME_REMEDY_ID.nextval;
        INSERT
        INTO ATM_HOME_REMEDY_TB VALUES
          (
            p_HOME_REMEDY_ID3,
            mrec.HOME_REMEDY3
          );
      END IF;
    END;
    BEGIN
      SELECT OTC_ID INTO p_OTC_ID1 FROM ATM_OTC_TB WHERE OTC=mrec.OTC1;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      IF mrec.OTC1 IS NOT NULL THEN
        p_OTC_ID1  := SEQ_OTC_ID.nextval;
        INSERT INTO ATM_OTC_TB VALUES
          ( p_OTC_ID1, mrec.OTC1
          );
      END IF;
    END;
    BEGIN
      SELECT OTC_ID INTO p_OTC_ID2 FROM ATM_OTC_TB WHERE OTC=mrec.OTC2;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      IF mrec.OTC2 IS NOT NULL THEN
        p_OTC_ID2  := SEQ_OTC_ID.nextval;
        INSERT INTO ATM_OTC_TB VALUES
          ( p_OTC_ID2, mrec.OTC2
          );
      END IF;
    END;
    BEGIN
      SELECT OTC_ID INTO p_OTC_ID3 FROM ATM_OTC_TB WHERE OTC=mrec.OTC3;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      IF mrec.OTC3 IS NOT NULL THEN
        p_OTC_ID3  := SEQ_OTC_ID.nextval;
        INSERT INTO ATM_OTC_TB VALUES
          ( p_OTC_ID3, mrec.OTC3
          );
      END IF;
    END;
    BEGIN
      SELECT REMEDY_ID
      INTO p_REMEDY_ID
      FROM ATM_REMEDY_TB
      WHERE BODY_PART_ID=p_BODY_PART_ID
      AND SYMPTOM_ID    =p_SYMPTOM_ID;
      UPDATE ATM_REMEDY_TB
      SET HOME_REMEDY_ID1=p_HOME_REMEDY_ID1,
        HOME_REMEDY_ID2  =p_HOME_REMEDY_ID2,
        HOME_REMEDY_ID3  =p_HOME_REMEDY_ID3,
        OTC_ID1          =p_OTC_ID1,
        OTC_ID2          =p_OTC_ID2,
        OTC_ID3          =p_OTC_ID3
      WHERE REMEDY_ID    =p_REMEDY_ID;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      INSERT
      INTO ATM_REMEDY_TB VALUES
        (
          SEQ_REMEDY_ID.nextval,
          p_BODY_PART_ID,
          p_SYMPTOM_ID,
          p_HOME_REMEDY_ID1,
          p_HOME_REMEDY_ID2,
          p_HOME_REMEDY_ID3,
          p_OTC_ID1,
          p_OTC_ID2,
          p_OTC_ID3
        );
    END;
  END LOOP;
END;
/

set define off;
create or replace FUNCTION distance (Lat1 IN NUMBER,
                                     Lon1 IN NUMBER,
                                     Lat2 IN NUMBER,
                                     Lon2 IN NUMBER,
                                     Radius IN NUMBER DEFAULT 3963) RETURN NUMBER IS
 -- Convert degrees to radians
 -- Reference: http://www.geodatasource.com/developers/sql
 DegToRad NUMBER := 57.29577951;

BEGIN
  RETURN(NVL(Radius,0) * ACOS((sin(NVL(Lat1,0) / DegToRad) * SIN(NVL(Lat2,0) / DegToRad)) +
        (COS(NVL(Lat1,0) / DegToRad) * COS(NVL(Lat2,0) / DegToRad) *
         COS(NVL(Lon2,0) / DegToRad - NVL(Lon1,0)/ DegToRad))));
END;
/